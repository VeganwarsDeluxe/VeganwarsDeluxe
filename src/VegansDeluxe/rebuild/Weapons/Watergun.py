from VegansDeluxe.core import AttachedAction, RegisterWeapon
from VegansDeluxe.core import DecisiveWeaponAction, RangedAttack
from VegansDeluxe.core import EventContext
from VegansDeluxe.core import After
from VegansDeluxe.core import Entity
from VegansDeluxe.core import AttackGameEvent

from VegansDeluxe.core import PreDamagesGameEvent
from VegansDeluxe.core import Session
from VegansDeluxe.core import Allies
from VegansDeluxe.core.Weapons.Weapon import RangedWeapon


@RegisterWeapon
class WaterGun(RangedWeapon):
    id = 'watergun'
    name = '–í–æ–¥–æ–º–µ—Ç'
    description = '–î–∞–ª—å–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: —Å–æ–∑–¥–∞—ë—Ç –≤–æ–¥—è–Ω–æ–π —â–∏—Ç –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–∏, –∏–∑-–∑–∞ —á–µ–≥–æ —Ç–∞ –Ω–µ ' \
                  '–º–æ–∂–µ—Ç –∑–∞–≥–æ—Ä–µ—Ç—å—Å—è —Ç—Ä–∏ —Ö–æ–¥–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Ö–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ—Ç +1 —É—Ä–æ–Ω–∞.'

    cubes = 3
    accuracy_bonus = 1
    energy_cost = 3
    damage_bonus = 0

    def __init__(self, session_id: str, entity_id: str):
        super().__init__(session_id, entity_id)
        self.cooldown_turn = 0


@AttachedAction(WaterGun)
class PistolAttack(RangedAttack):
    pass


@AttachedAction(WaterGun)
class CreateWaterShield(DecisiveWeaponAction):
    id = 'watershield'
    name = '–í–æ–¥—è–Ω–æ–π —â–∏—Ç'
    target_type = Allies()

    def __init__(self, session: Session, source: Entity, weapon: WaterGun):
        super().__init__(session, source, weapon)
        self.weapon: WaterGun = weapon

    @property
    def hidden(self) -> bool:
        return self.session.turn < self.cooldown_turn

    def func(self, source, target):
        @After(self.session.id, 0, event=PreDamagesGameEvent, repeats=3)
        def _(context: EventContext[PreDamagesGameEvent]):
            aflame = self.source.get_state('aflame')
            aflame.extinguished = True
            aflame.flame = 0

            self.session.say(f'üîã|{self.source.name} –ø–æ–ª—É—á–∞–µ—Ç 2 —ç–Ω–µ—Ä–≥–∏–∏.')
            self.source.energy += 2
            if self.session.turn >= self.turn:
                self.active = False
                self.session.say(f'üí®|–í–æ–¥—è–Ω–æ–π —â–∏—Ç {self.source.name} –∏—Å–ø–∞—Ä–∏–ª—Å—è!')

        @After(self.session.id, 0, event=AttackGameEvent, repeats=3)
        def _(context: EventContext[AttackGameEvent]):
            if context.event.source != self.source:
                return
            if context.event.damage:
                context.event.damage += 1

        self.weapon.cooldown_turn = self.session.turn + 5
        self.session.say(f'üíß|{source.name} —Å–æ–∑–¥–∞—ë—Ç –≤–æ–¥—è–Ω–æ–π —â–∏—Ç –≤–æ–∫—Ä—É–≥ {target.name}.')
