from core.Actions.WeaponAction import MeleeAttack
from core.ContentManager import AttachedAction
from core.Weapons.Weapon import MeleeWeapon
from rebuild.States.DamageThreshold import DamageThreshold


class Axe(MeleeWeapon):
    id = 'axe'
    name = '–¢–æ–ø–æ—Ä'
    description = '–ë–ª–∏–∂–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3, —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è. –ò–º–µ–µ—Ç —à–∞–Ω—Å –ø–æ–∫–∞–ª–µ—á–∏—Ç—å —Ü–µ–ª—å, ' \
                  '–ø–æ—Å–ª–µ —á–µ–≥–æ –µ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥—á–µ —Å–Ω—è—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –æ–¥–Ω—É –∂–∏–∑–Ω—å.'

    cubes = 3
    accuracy_bonus = 2
    energy_cost = 2
    damage_bonus = 0


@AttachedAction(Axe)
class AxeAttack(MeleeAttack):
    def func(self, source, target):
        damage = super().attack(source, target)
        if not damage:
            return damage
        threshold = target.get_state(DamageThreshold.id)
        self.session.say(f'ü§ï|{target.name} –ø–æ–∫–∞–ª–µ—á–µ–Ω!')

        threshold.threshold += 1
        return damage
