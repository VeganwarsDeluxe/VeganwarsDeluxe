from core.ContentManager import AttachedAction
from core.Actions.StateAction import DecisiveStateAction, FreeStateAction
from core.Context import EventContext
from core.ContentManager import At
from core.Entities import Entity
from core.Events.DamageEvents import PostDamageGameEvent

from core.Sessions import Session
from core.Skills.Skill import Skill
from core.TargetType import Allies


class Concentration(Skill):
    id = 'concentration'
    name = '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    description = '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º ' \
                  '100%/75%/50%/25% –¥–ª—è 1/2/3/4 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ –∑–∞ —ç—Ç–æ —Ç–µ—Ä—è–µ—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å.'

    def __init__(self):
        super().__init__()
        self.multiplier = 1


@AttachedAction(Concentration)
class ShieldGenAction(FreeStateAction):
    id = 'concentration-x1'
    name = '–©–∏—Ç | –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä'
    target_type = Allies()
    priority = -10

    def __init__(self, session: Session, source: Entity, skill: Concentration):
        super().__init__(session, source, skill)
        self.state = skill

    def func(self, source, target):
        self.state.cooldown_turn = self.session.turn + 5
        if target == source:
            self.session.say(f"üîµ|{source.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —â–∏—Ç. –£—Ä–æ–Ω –æ—Ç—Ä–∞–∂–µ–Ω!")
        else:
            self.session.say(f"üîµ|{source.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —â–∏—Ç –Ω–∞ {target.name}. –£—Ä–æ–Ω –æ—Ç—Ä–∞–∂–µ–Ω!")

        @At(self.session.id, turn=self.session.turn, event=PostDamageGameEvent)
        def shield_block(context: EventContext[PostDamageGameEvent]):
            if context.event.target != target:
                return
            if not context.event.damage:
                return
            context.event.damage = 0
