from mongoengine import connect, DoesNotExist
from telebot import TeleBot, types
from config import rpg_token, mongourl

from rpg.db.User import User
from rpg.db.Item import Item, generate_object_code, create_item, create_unscroll, create_recipe

from rpg.texts import *

bot = TeleBot(rpg_token)
connect(host=mongourl, db='vegan_rpg')


def main_menu_keyboard(m):
    kb = types.ReplyKeyboardMarkup()
    kb.add(types.KeyboardButton(ATTACK_COMMAND),
           types.KeyboardButton(DEFEND_COMMAND),
           types.KeyboardButton(QUESTS_COMMAND))
    kb.add(types.KeyboardButton(PROFILE_COMMAND),
           types.KeyboardButton(INVENTORY_COMMAND),
           types.KeyboardButton(CASTLE_COMMAND))
    kb.add(types.KeyboardButton(ABILITIES_COMMAND), types.KeyboardButton(ITEMS_COMMAND))
    return kb


def no_castle_menu_keyboard(m):
    kb = types.ReplyKeyboardMarkup()
    kb.add(types.KeyboardButton(RAT_CASTLE+JOIN_MARK), types.KeyboardButton(DARK_CASTLE+JOIN_MARK))
    kb.add(types.KeyboardButton(NECROMANCER_CASTLE+JOIN_MARK), types.KeyboardButton(EXPLOSION_CASTLE+JOIN_MARK))
    kb.add(types.KeyboardButton(NO_CASTLE_REST_COMMAND))
    kb.add(types.KeyboardButton(PROFILE_COMMAND))
    return kb


def shop_menu_keyboard(m):
    kb = types.ReplyKeyboardMarkup()
    kb.add(types.KeyboardButton(SCROLLS_SHOP_COMMAND), types.KeyboardButton(EQUIPMENT_SHOP_COMMAND))
    kb.add(types.KeyboardButton(DEC_SCROLL_COMMAND), types.KeyboardButton(DEC_RECIPE_COMMAND))
    kb.add(types.KeyboardButton(PROFILE_COMMAND))
    return kb


def castle_menu_keyboard(m):
    kb = types.ReplyKeyboardMarkup()
    kb.add(types.KeyboardButton(SHOP_COMMAND), types.KeyboardButton(CRAFT_COMMAND))
    kb.add(types.KeyboardButton(AUCTION_COMMAND), types.KeyboardButton(TRADE_COMMAND))
    kb.add(types.KeyboardButton(REST_COMMAND))
    kb.add(types.KeyboardButton(PROFILE_COMMAND))
    return kb


def attack_menu_keyboard(m):
    user = User.objects.get(id=m.from_user.id)

    kb = types.ReplyKeyboardMarkup()
    for button, castle in CASTLE_ATTACK_BUTTONS.items():
        if user.castle == castle:
            continue
        kb.add(types.KeyboardButton(button))

    kb.add(types.KeyboardButton(PROFILE_COMMAND))
    return kb


@bot.message_handler(commands=['start'])
def start_handler(m):
    bot.reply_to(m, '–ò–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',
                 reply_markup=main_menu_keyboard(m) if m.chat.type == 'private' else None)


@bot.message_handler(func=lambda m: m.chat.type != 'private')
def non_private_handler(m):
    pass


@bot.message_handler(func=lambda m: False)
def private_handler(m):
    try:
        user = User.objects.get(id=m.from_user.id)
    except DoesNotExist:
        user = User(id=m.from_user.id)
        user.username = m.from_user.username or None
        user.save()
    return user


@bot.message_handler(func=lambda m: private_handler(m) and False)
def lambda_private_handler(m):
    pass


@bot.message_handler(func=lambda m: m.text == PROFILE_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    bot.reply_to(m, user.get_profile_text(), reply_markup=main_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == CASTLE_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle == 'outsider':
        bot.reply_to(m, NO_CASTLE_PLEASE_JOIN, reply_markup=no_castle_menu_keyboard(m))
        return
    bot.reply_to(m, CASTLE_ENTRANCE_TEXT, reply_markup=castle_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == SHOP_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle == 'outsider':
        bot.reply_to(m, NO_CASTLE_PLEASE_JOIN, reply_markup=no_castle_menu_keyboard(m))
        return

    tts = "üìú–°–≤–∏—Ç–∫–∏ - –î—Ä–µ–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤–µ–¥–µ–Ω–∏–∏ –±–æ—è –∏ –µ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö. –° –ø–æ–º–æ—â—å—é –Ω–∏—Ö –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã.\n\n" \
          "‚öôÔ∏è–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ - –æ—Ä—É–∂–µ–π–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å—Ç–∞—Ä–æ–≥–æ –∫—É–∑–Ω–µ—Ü–∞. –ü—Ä–æ—Å—Ç–æ–µ, –Ω–æ –Ω–∞–¥—ë–∂–Ω–æ–µ –æ—Ä—É–∂–∏–µ."
    bot.reply_to(m, tts, reply_markup=shop_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == DEC_RECIPE_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle == 'outsider':
        bot.reply_to(m, NO_CASTLE_PLEASE_JOIN, reply_markup=no_castle_menu_keyboard(m))
        return

    tts = "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ –ª–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –¥—Ä–µ–≤–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π. " \
          "–ó–∞ —Ö–æ—Ä–æ—à—É—é —Ü–µ–Ω—É, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è. –ß—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.\n\n"
    for item in user.items:
        if item.type == 'recipe':
            tts += f'{item.emoji}|{item.name}: üí∞100 /dec_{item.object_code}\n'
    bot.reply_to(m, tts, reply_markup=shop_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == DEC_SCROLL_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle == 'outsider':
        bot.reply_to(m, NO_CASTLE_PLEASE_JOIN, reply_markup=no_castle_menu_keyboard(m))
        return

    tts = "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ –ª–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –¥—Ä–µ–≤–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π. " \
          "–ó–∞ —Ö–æ—Ä–æ—à—É—é —Ü–µ–Ω—É, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è. –ß—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–≤–∏—Ç–æ–∫, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.\n\n"
    for item in user.items:
        if item.type == 'unscroll':
            tts += f'{item.emoji}|{item.name}: üí∞100 /dec_{item.object_code}\n'
    bot.reply_to(m, tts, reply_markup=shop_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == ATTACK_COMMAND)
def start_handler(m):
    bot.reply_to(m, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏:", reply_markup=attack_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == DEFEND_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle == 'outsider':
        bot.reply_to(m, NO_CASTLE_PLEASE_JOIN, reply_markup=no_castle_menu_keyboard(m))
        return
    user.current_action = 'defense'
    user.save()
    bot.reply_to(m, "–í—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –∫ –∑–∞—â–∏—Ç–µ –∑–∞–º–∫–∞. –ë–∏—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ö–∑ —Å–∫–æ–ª—å–∫–æ, –∫–∞–∫ –ë—Ä–∏—Ç –Ω–∞—á–Ω–µ—Ç.",
                 reply_markup=main_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text in CASTLE_ATTACK_BUTTONS)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    attack_target = CASTLE_ATTACK_BUTTONS[m.text]
    if attack_target == user.castle:
        bot.reply_to(m, '–°–≤–æ–π –∑–∞–º–æ–∫ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!', reply_markup=main_menu_keyboard(m))
        return
    user.current_action = 'attack'
    user.attack_target = attack_target
    user.save()
    bot.reply_to(m, f"–í—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –∫ –∞—Ç–∞–∫–µ –Ω–∞ {CASTLE_ID_TO_TEXT.get(attack_target)}. "
                    f"–ë–∏—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ö–∑ —Å–∫–æ–ª—å–∫–æ, –∫–∞–∫ –ë—Ä–∏—Ç –Ω–∞—á–Ω–µ—Ç.",
                 reply_markup=main_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == REST_COMMAND or m.text == NO_CASTLE_REST_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    user.current_action = 'rest'
    user.save()
    bot.reply_to(m, "–í—ã –ø—Ä–∏–ª–µ–≥–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–∏–ª–∏—Å—å.",
                 reply_markup=main_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text == INVENTORY_COMMAND)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if not user.items:
        item = Item(object_code=generate_object_code(), name="–¢–æ—Ä—Ç–∏–∫", emoji="üéÇ", description="–¢–æ—Ä—Ç–∏–∫ –¥–ª—è –Ω–æ–≤–µ–Ω—å–∫–∏—Ö!")
        user.items.append(item)
        bot.send_message(m.chat.id, "–í–∞–º –¥–∞–ª–∏ —Ç–æ—Ä—Ç–∏–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –≤–∞—Å –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
    tts = "üì¶–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    for item in user.items:
        item: Item
        tts += f"{item.emoji}|{item.name} /info_{item.object_code}\n"
    user.save()
    bot.reply_to(m, tts, reply_markup=main_menu_keyboard(m))


@bot.message_handler(func=lambda m: m.text in CASTLE_JOIN_BUTTONS)
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    if user.castle != 'outsider':
        bot.reply_to(m, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∑–∞–º–∫–µ.", reply_markup=main_menu_keyboard(m))
        return
    castle = CASTLE_JOIN_BUTTONS[m.text]
    bot.reply_to(m, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–º–æ–∫ {castle}! –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∑–∞–º–∫–æ–≤—ã–π —á–∞—Ç: [CASTLE_LINK].",
                 reply_markup=main_menu_keyboard(m))
    user.castle = castle
    user.save()


@bot.message_handler(func=lambda m: m.text.startswith('/info_'))
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    item_code = m.text.split('_', 1)[1]
    item = user.get_item(item_code)
    if not item:
        bot.reply_to(m, '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É –≤–∞—Å –Ω–µ—Ç!')
    bot.reply_to(m, f'{item.emoji}|{item.description}')


@bot.message_handler(commands=['debug'])
def start_handler(m):
    user = User.objects.get(id=m.from_user.id)
    user.items.append(create_unscroll())
    user.items.append(create_recipe('red'))
    user.items.append(create_recipe('blue'))
    user.items.append(create_recipe('green'))
    user.items.append(create_recipe('huh'))
    user.save()

    bot.reply_to(m, '–î–µ—Ä–∂–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–ª—è –¥–µ–±–∞–≥–∞.')


bot.polling()
