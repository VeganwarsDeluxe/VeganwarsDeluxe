from core.Actions.Action import DecisiveAction
from core.TargetType import Enemies
from core.Weapons.Weapon import Weapon


class Shest(Weapon):
    id = 'shest'
    name = '–®–µ—Å—Ç'
    description = '–ë–ª–∏–∂–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–±–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å –Ω–æ–≥, –ø–æ–ª—É—á–∞—è ' \
                  '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥–∞–∂–µ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é.'

    def __init__(self, source):
        super().__init__(source)
        self.cubes = 3
        self.accuracybonus = 2
        self.energycost = 2
        self.dmgbonus = 0

        self.cooldown_turn = 0

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return super().actions
        return super().actions + [
            KnockDown(self.source, self)
        ]


class KnockDown(DecisiveAction):
    id = 'knock_down'
    name = '–°–±–∏—Ç—å —Å –Ω–æ–≥'

    def __init__(self, source, weapon):
        super().__init__(source, Enemies())
        self.weapon = weapon

    def func(self, source, target):
        self.weapon.cooldown_turn = source.session.turn + 6
        damage = self.weapon.attack(source, target)
        if not damage:
            source.session.say(f'üö∑üí®|{source.name} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±–∏—Ç—å {target.name} —Å –Ω–æ–≥!')
            return
        source.session.say(f'üö∑|{source.name} —Å–±–∏–≤–∞–µ—Ç {target.name} —Å –Ω–æ–≥! {target.name} —Ç–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –∏ –ø–∞–¥–∞–µ—Ç!')
        state = target.get_skill('knockdown')
        state.active = True
