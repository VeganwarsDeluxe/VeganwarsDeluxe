from core.Weapons.Weapon import Weapon
from core.Action import DecisiveAction
from core.TargetType import Enemies


class Saber(Weapon):
    id = 'saber'
    name = '–°–∞–±–ª—è'
    description = '–ë–ª–∏–∂–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3, —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–≥–æ –≤—Ä–∞–≥–∞. ' \
                  '–ï—Å–ª–∏ —Ç–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, —É—Ä–æ–Ω –æ—Ç –µ–≥–æ –∞—Ç–∞–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∞ —ç–Ω–µ—Ä–≥–∏—è —Ü–µ–ª–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –¥–æ 0.'

    def __init__(self, owner):
        super().__init__(owner)
        self.cubes = 3
        self.accuracybonus = 2
        self.energycost = 2
        self.dmgbonus = 0

        self.cooldown_turn = 0

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return super().actions
        return [
            Parry(self.source, self)
        ] + super().actions

    def attack(self, source, target):
        return super().attack(source, target)


class Parry(DecisiveAction):
    id = '–ü–∞—Ä–∏—Ä–æ–≤–∞—Ç—å'
    name = 'parry'

    def __init__(self, source, weapon):
        super().__init__(source, Enemies(), priority=-5)
        self.weapon = weapon

    def func(self, source, target):
        self.weapon.cooldown_turn = source.session.turn + 5
        source.session.say(f'üó°|{source.name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å.')

        @source.session.handlers.at(turn=source.session.turn, events='post-attack')
        def parry():
            if target.action.id != 'attack':
                return
            attack_target = target.action.data.get('target')
            if not attack_target:
                return
            if attack_target != source:
                return
            damage = target.action.data.get('damage')
            if not damage:
                return

            source.session.say(f'üó°|{source.name} –ø–∞—Ä–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É {target.name}! –£—Ä–æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω,'
                               f' {target.name} —Ç–µ—Ä—è–µ—Ç –≤—Å—é —ç–Ω–µ—Ä–≥–∏—é!')
            target.energy = 0
            target.action.data.update({'damage': 0})
