import random

from core.Weapons.Weapon import Weapon
from core.States.State import State
from core.Action import DecisiveAction
from core.TargetType import Enemies, Allies, Everyone


class PortalGun(Weapon):  # TODO: Fix or delete
    id = 'portalgun'
    name = '–ü–æ—Ä—Ç–∞–ª—å–Ω–∞—è –ø—É—à–∫–∞'
    description = '–î–∞–ª—å–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-2.'

    def __init__(self, owner):
        super().__init__(owner)
        self.cubes = 2
        self.accuracybonus = 1
        self.energycost = 3
        self.dmgbonus = 0
        self.ranged = True

        self.cooldown_turn = 0

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return super().actions
        actions = [
            # DecisiveAction(self.retreat, self.owner, target_type=Everyone(),
            #                name='üîµ|–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç–∞–ª', id='retreat_portal'),
            # DecisiveAction(self.teleport_approach, self.owner, target_type=Everyone(),
            #                name='üü†|–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç–∞–ª', id='approach_portal'),
            # DecisiveAction(self.knock_down_portal, self.owner, target_type=Enemies(),
            #                name='üî¥|–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç–∞–ª', id='knock_down_portal')
        ]
        # return super().actions + [random.choice(actions)]

    def attack_text(self, source, target, damage):
        attack_emoji = "‚ö°Ô∏è"
        if damage:
            source.session.say(f'{attack_emoji}|{source.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {target.name} –≥–∏–ø–µ—Ä-—á–∞—Å—Ç–∏—Ü–∞–º–∏! '
                               f'–ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞.')
        else:
            source.session.say(f'üîò|{source.name} –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—à–∫—É –Ω–∞ {target.name}, –Ω–æ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.')

    def retreat(self, source, target):
        self.cooldown_turn = source.session.turn + 4
        for entity in target.nearby_entities:
            entity.nearby_entities.remove(target) if target in entity.nearby_entities else None
        target.nearby_entities = []
        target.session.say(f'üîµ|{source.name} —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç {target.name} –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –≤—Å–µ—Ö!')

    def teleport_approach(self, source, target):
        self.cooldown_turn = source.session.turn + 4
        target.nearby_entities = list(filter(lambda t: t != target, target.session.entities))
        for entity in target.nearby_entities:
            entity.nearby_entities.append(target) if target not in entity.nearby_entities else None
        target.session.say(f'üü†|{source.name} —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç {target.name} –≤ —Ü–µ–Ω—Ç—Ä!')

    def knock_down_portal(self, source, target):
        self.cooldown_turn = source.session.turn + 4
        source.session.say(f'üî¥|{source.name} —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ä—Ç–∞–ª –ø–æ–¥ –Ω–æ–≥–∞–º–∏ —É {target.name}! {target.name} –ø–∞–¥–∞–µ—Ç!')
        state = target.get_skill('knockdown')
        state.active = True

    def attack(self, source, target):
        return super().attack(source, target)
