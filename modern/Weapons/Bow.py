from core.Actions.Action import DecisiveAction
from core.TargetType import Enemies
from core.Weapons.Weapon import Weapon


class Bow(Weapon):
    id = 'bow'
    name = '–õ—É–∫'
    description = '–î–∞–ª—å–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3, —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω—è—è. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –ø–æ–¥–∂–∏–≥–∞–µ—Ç —Å—Ç—Ä–µ–ª—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ ' \
                  '–Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω, –Ω–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ —Ü–µ–ª—å 2 —ç—Ñ—Ñ–µ–∫—Ç–∞ –≥–æ—Ä–µ–Ω–∏—è.'

    def __init__(self, source):
        super().__init__(source)
        self.cubes = 3
        self.accuracybonus = 1
        self.energycost = 3
        self.dmgbonus = 0
        self.ranged = True

        self.cooldown_turn = 0
        self.strike = False

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return super().actions
        return [FireArrow(self.source, self)] + super().actions


class FireArrow(DecisiveAction):
    id = 'fire_arrow'
    name = '–û–≥–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–∞'

    def __init__(self, source, weapon):
        super().__init__(source, Enemies())
        self.weapon = weapon

    def func(self, source, target):
        self.weapon.cooldown_turn = source.session.turn + 5
        damage = self.weapon.calculate_damage(source, target)
        source.energy = max(source.energy - self.weapon.energycost, 0)
        if not damage:
            source.session.say(f'üí®|{source.name} –ø–æ–¥–∂–∏–≥–∞–µ—Ç —Å—Ç—Ä–µ–ª—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ –≤ {target.name}, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç.')
            return
        source.session.say(f'‚òÑÔ∏è|{source.name} –ø–æ–¥–∂–∏–≥–∞–µ—Ç —Å—Ç—Ä–µ–ª—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ –≤ {target.name}!')
        aflame = target.get_skill('aflame')
        aflame.add_flame(source, 2)
