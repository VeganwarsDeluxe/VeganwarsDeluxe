from core.TargetType import TargetType, Enemies
from core.Weapons.Weapon import Weapon
from core.Action import DecisiveAction
from modern.Weapons.Fist import Fist


class Chain(Weapon):
    id = 'chain'
    name = '–¶–µ–ø—å'
    description = '–ë–ª–∏–∂–Ω–∏–π –±–æ–π, —É—Ä–æ–Ω 1-3, —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: —Å —à–∞–Ω—Å–æ–º –≤—ã–±–∏–≤–∞–µ—Ç –æ—Ä—É–∂–∏–µ –≤—Ä–∞–≥–∞ –∏–∑ ' \
                  '—Ä—É–∫. –ï—Å–ª–∏ –≤—Ä–∞–≥ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è, —à–∞–Ω—Å —Ä–∞–≤–µ–Ω 100%.'

    def __init__(self, owner):
        super().__init__(owner)
        self.cubes = 3
        self.accuracybonus = 2
        self.energycost = 2
        self.dmgbonus = 0
        self.cooldown_turn = 0

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return super().actions
        return super().actions + [
            KnockWeapon(self.source, self)
        ]


class KnockWeapon(DecisiveAction):
    id = 'knock_weapon'
    name = '–í—ã–±–∏—Ç—å –æ—Ä—É–∂–∏–µ'

    def __init__(self, source, weapon):
        super().__init__(source, Enemies(distance=1))
        self.weapon = weapon

    def func(self, source, target):
        self.weapon.cooldown_turn = source.session.turn + 3
        self.weapon.attack(source, target)
        if target.action.id != 'reload':
            source.session.say(f'‚õìüí®|{source.name} –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–±–∏—Ç—å –æ—Ä—É–∂–∏–µ –∏–∑ —Ä—É–∫ {target.name}!')
        else:
            source.session.say(f'‚õì|{source.name} –≤—ã–±–∏–ª –æ—Ä—É–∂–∏–µ –∏–∑ —Ä—É–∫ {target.name}!')
            state = target.get_skill('knocked-weapon')
            state.weapon = target.weapon
            target.weapon = Fist(target)
