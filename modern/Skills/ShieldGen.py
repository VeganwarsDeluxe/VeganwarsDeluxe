from core.Skills.Skill import Skill
from core.Action import DecisiveAction
from core.TargetType import TargetType, Enemies, Allies


class ShieldGen(Skill):
    id = 'shield-gen'
    name = '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —â–∏—Ç–æ–≤'
    description = '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —â–∏—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π. –≠—Ç–æ—Ç —â–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 5 —Ö–æ–¥–æ–≤.'

    def __init__(self, source):
        super().__init__(source, constant=True)

        self.cooldown_turn = 0

    def shield(self, source, target):
        self.cooldown_turn = source.session.turn + 5
        if target == source:
            target.session.say(f"üîµ|{source.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —â–∏—Ç. –£—Ä–æ–Ω –æ—Ç—Ä–∞–∂–µ–Ω!")
        else:
            target.session.say(f"üîµ|{source.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —â–∏—Ç –Ω–∞ {target.name}. –£—Ä–æ–Ω –æ—Ç—Ä–∞–∂–µ–Ω!")

        @source.session.handlers.at(turn=source.session.turn, events='post-attack')
        def shield_block():
            for entity in source.session.entities:
                attack_target = entity.action.data.get('target')
                if not attack_target:
                    continue
                if attack_target != target:
                    continue
                damage = entity.action.data.get('damage')
                if not damage:
                    continue
                entity.action.data.update({'damage': 0})

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return []
        return [
            DecisiveAction(self.shield, self.source, target_type=Allies(),
                           name='–©–∏—Ç | –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä', id='shield-gen', priority=-2)
        ]
