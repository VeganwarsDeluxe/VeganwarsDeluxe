from core.Skills.Skill import Skill
from core.Action import DecisiveAction, FreeAction
from core.TargetType import TargetType, Enemies


class Mimic(Skill):
    id = 'mimic'
    name = '–ú–∏–º–∏–∫'
    description = '–ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —á—Ç–æ —Ç–æ –¥–µ–ª–∞–µ—Ç, –≤—ã ' \
                  '–ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!'

    def __init__(self, source):
        super().__init__(source)
        self.cooldown_turn = 0

    @property
    def actions(self):
        if self.source.session.turn < self.cooldown_turn:
            return []
        return [
            CopyAction(self.source, self)
        ]


class CopyAction(FreeAction):
    id = 'copyAction'
    name = '–ó–∞–ø–æ–º–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'

    def __init__(self, source, skill):
        super().__init__(source, Enemies(), priority=-2)
        self.skill = skill

    def func(self, source, target):
        self.skill.cooldown_turn = source.session.turn + 0
        success = False
        if target.action.type == 'action':
            success = True
            source.session.say(f'üé≠|–ú–∏–º–∏–∫ {source.name} –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ {target.name}!')
            # target.action.source = source
            source.items.append(target.action)
        if not success:
            source.session.say(f'üé≠|–ú–∏–º–∏–∫—É {source.name} –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∏—á–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É {target.name}!')
